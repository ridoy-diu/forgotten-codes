#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *node1, *node2, *node3, *node4, *node5, *start, *p;

    node1 = (struct node *)malloc(sizeof(struct node));
    node2 = (struct node *)malloc(sizeof(struct node));
    node3 = (struct node *)malloc(sizeof(struct node));
    node4 = (struct node *)malloc(sizeof(struct node));
    node5 = (struct node *)malloc(sizeof(struct node));

    node1->data = 1;
    node2->data = 12;
    node3->data = 13;
    node4->data = 14;
    node5->data = 15;

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;
    node5->next = NULL;
    start = node1;

    struct node *newNode;
    newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = 16;
    newNode->next=node1;
    start = newNode;

//    p = start;
//    while (p != NULL)
//    {
//        scanf("%d", &p->data);
//        p = p->next;
//    }
//    printf("\n\n");

    p = start;

    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *node1, *node2, *node3, *node4, *node5, *start, *p;

    node1 = (struct node *)malloc(sizeof(struct node));
    node2 = (struct node *)malloc(sizeof(struct node));
    node3 = (struct node *)malloc(sizeof(struct node));
    node4 = (struct node *)malloc(sizeof(struct node));
    node5 = (struct node *)malloc(sizeof(struct node));

    node1->data = 11;
    node2->data = 12;
    node3->data = 13;
    node4->data = 14;
    node5->data = 15;

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;
    node5->next = NULL;
    start = node1;

    // a new node insertion at the end
    struct node *newNode;
    newNode = (struct node *)malloc(sizeof(struct node));
    newNode->data = 16;
    newNode->next=NULL;
    p = start;
    while (p->next != NULL)  // condition changes
    {
        p = p->next;
    }
    p->next = newNode; // last node assigned to previous node 

    p = start;

    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *n1, *n2, *n3, *n4, *start, *p;
    n1 = (struct node *)malloc(sizeof(struct node));
    n2 = (struct node *)malloc(sizeof(struct node));
    n3 = (struct node *)malloc(sizeof(struct node));
    n4 = (struct node *)malloc(sizeof(struct node));

    n1->data = 4;
    n2->data = 5;
    n3->data = 6;
    n4->data = 7;

    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = NULL;
    start = n1;

    struct node *newN;
    newN = (struct node *)malloc(sizeof(struct node));
    newN->data = 10;
    p = start;

    int k = 3; // from 2
    for (int i = 1; i < k - 1; i++)
    {
        if (p->next != NULL)
        {
            p = p->next;
        }
    }
    newN->next = p->next; //
    p->next = newN;       //

    p = start;
    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *n1, *n2, *n3, *n4, *start, *p;
    n1 = (struct node *)malloc(sizeof(struct node));
    n2 = (struct node *)malloc(sizeof(struct node));
    n3 = (struct node *)malloc(sizeof(struct node));
    n4 = (struct node *)malloc(sizeof(struct node));

    n1->data = 4;
    n2->data = 5;
    n3->data = 6;
    n4->data = 7;

    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = NULL;
    start = n1;

    struct node *temp = start;
    start = start->next;
    free(temp);

    // printf("%d\n",n1->data);  // verify deletion

    p = start;
    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *n1, *n2, *n3, *n4, *start, *p;
    n1 = (struct node *)malloc(sizeof(struct node));
    n2 = (struct node *)malloc(sizeof(struct node));
    n3 = (struct node *)malloc(sizeof(struct node));
    n4 = (struct node *)malloc(sizeof(struct node));

    n1->data = 4;
    n2->data = 5;
    n3->data = 6;
    n4->data = 7;

    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = NULL;
    start = n1;

    p = start;
    while (p->next->next != NULL)
    {
        p = p->next;
    }
    free(p->next);
    p->next = NULL;

    // printf("%d\n",n4->data); //verify

    p = start;
    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *n1, *n2, *n3, *n4, *start, *p;
    n1 = (struct node *)malloc(sizeof(struct node));
    n2 = (struct node *)malloc(sizeof(struct node));
    n3 = (struct node *)malloc(sizeof(struct node));
    n4 = (struct node *)malloc(sizeof(struct node));

    n1->data = 4;
    n2->data = 5;
    n3->data = 6;
    n4->data = 7;

    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = NULL;
    start = n1;

    p = start;

    int k = 2; // from 2
    for (int i = 1; i < k - 1; i++)
    {
        if (p->next != NULL)
        {
            p = p->next;
        }
    }
    struct node *temp ;
    temp = p->next;
    p->next = p->next->next;
    free(temp);

    p = start;
    while (p != NULL)
    {
        printf("%d\n", p->data);
        p = p->next;
    }

    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
} node;

int main()
{
    int n;
    printf("Enter number of nodes:");
    scanf("%d",&n);

    node *arr[20], *start,*p;

    for(int i = 0; i<n; i++)
    {
        arr[i] = (node *)malloc(sizeof(node));
        scanf("%d",&arr[i]->data);
    }
    for(int i = 0; i<n-1; i++)
    {
        arr[i]->next = arr[i+1];
    }
    arr[n-1]->next = NULL;

    start = arr[0];
    p = start;
    while(p!=NULL)
    {
        printf("%d\n",p->data);
        p=p->next;
    }

    return 0;
}


-----------------------------------

#include <stdio.h>
#include <stdlib.h>
struct node
{
    int data;
    struct node *previous;
    struct node *next;
};
int main()
{
    struct node *n1, *n2, *n3;
    n1 = (struct node *)malloc(sizeof(struct node));
    n2 = (struct node *)malloc(sizeof(struct node));
    n3 = (struct node *)malloc(sizeof(struct node));

    n1->data = 2;
    n2->data = 3;
    n3->data = 4;

    n1->previous = NULL;
    n2->previous = n1;
    n3->previous = n2;

    n1->next = n2;
    n2->next = n3;
    n3->next = NULL;

    struct node *left = n1;
    struct node *right = n3;

    struct node *p;
    p = left;
    while(p!= NULL)
    {
        printf("%d\n",p->data);
        p=p->next;
    }
    p = right;
    while(p!= NULL)
    {
        printf("%d\n",p->data);
        p=p->previous;
    }
    return 0;
}

-----------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
struct node
{
    int data;
    struct node *next;
};
int main()
{
    struct node *node1, *node2, *node3, *node4, *node5, *start, *p;

    node1 = (struct node *)malloc(sizeof(struct node));
    node2 = (struct node *)malloc(sizeof(struct node));
    node3 = (struct node *)malloc(sizeof(struct node));
    node4 = (struct node *)malloc(sizeof(struct node));
    node5 = (struct node *)malloc(sizeof(struct node));

    node1->data = 1;
    node2->data = 12;
    node3->data = 13;
    node4->data = 14;
    node5->data = 15;

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;
    node5->next = NULL;
    start = node1;
      
    bool result = false;  
    
    p = start;

    while (p != NULL)
    {
        if(p->data == 13)
        {
            result = true;
            break;
        }
        // printf("%d\n", p->data);
        p = p->next;
    }

    if(result)
    {
        printf("Found\n");
    }
    else
    {
        printf("Not Found\n");
    }
    
    return 0;
}



